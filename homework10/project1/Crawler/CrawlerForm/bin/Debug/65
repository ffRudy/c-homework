<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="最近在写一篇关于如何扩展 Visual Studio 编辑器的文章时，用到了 MEF，因此打算写一篇文章提一下这个技术点。本篇文章并不打算详细介绍 MEF，只是一个最简单的入门，相信您在阅读本篇文章后" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>如何用 MEF 扩展应用程序 - stg609 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/nature/bundle-nature.min.css?v=OGPViv8ygSk1htOgsEILRhpv35ZKyr-flppEtpvHCA0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/stg609/custom.css?v=VHDGx&#x2B;s15cnUNvOi89/bFTGagQw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/nature/bundle-nature-mobile.min.css?v=RzYS8QGQmC0gsBHSUxnpybzlR89FFui1fBHmMB-mNoc" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/stg609/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/stg609/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/stg609/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=uk-as-QYRHtjaAbeEigAktvhwf01NRrnle-6exg65Ak"></script>
    <script>
        var currentBlogId = 34546;
        var currentBlogApp = 'stg609';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'nature';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <!--done-->
<div id="banner"><div id="bnr_pic">
<!--done-->
<div class="header">
	<div class="headerText">
		<a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/stg609/">我不是圣人</a>
<br>
	</div><br>
	<div class="headerDis">
以客户为中心，业务为导向，服务为基础~
</div>
</div>

</div></div>
<div id="main">
	<!-- left starts -->
	<div id="left">
		<DIV id="mystats">
			<br/>
				<!--done-->
<div class="blogStats">
随笔 - 
75&nbsp;
文章 - 
73&nbsp;
评论 - 
947&nbsp;

110
</div>


			
		</DIV>
		<div id="mylinks">

<a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
&nbsp;&nbsp;
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/stg609/">
首页</a>
&nbsp;&nbsp;

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
&nbsp;&nbsp;
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/stg609">
联系</a>&nbsp;&nbsp;
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
&nbsp;&nbsp;
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/stg609/rss/">
订阅</a>&nbsp;
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/stg609/rss/">
    <img src="/skins/nature/images/xml.gif" alt="订阅" />
</a>

</div>
		<div id="topics">
			<div id="post_detail">
<div class="post">
	<div class="postTitle">
		<h1>
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/stg609/p/3702802.html">如何用 MEF 扩展应用程序</a>
</h1>
	</div>
	
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>　　最近在写一篇关于如何扩展 Visual Studio 编辑器的文章时，用到了 MEF，因此打算写一篇文章提一下这个技术点。本篇文章并不打算详细介绍 MEF，只是一个最简单的入门，相信您在阅读本篇文章后，可以迅速开发出一个可扩展的应用程序。</p>
<p>&nbsp;</p>
<h2 style="font-size: 1.5em; font-family: 'Microsoft YaHei UI', 'Microsoft YaHei'; background-color: #dfdfdf; padding: 5px 10px; margin-bottom: 30px; margin-top: 20px; font-weight: bold; background-position: initial initial; background-repeat: initial initial;" data-index="1">简 介</h2>
<p>　　MEF(Managed Extensibility Framework)，是微软推出的一款用于搭建可扩展应用程序的框架，起初是独立于 .Net 发布的，后来集成到了 .Net 4.0 中。使用该框架可以非常轻松地扩展一个已发布的应用程序的功能，连 Visual Studio IDE 中的代码编辑器窗口也采用了MEF的思想，因此大大方便了开发人员对编辑器的扩展。</p>
<p>　　MEF 可用在任何使用 .NET Framework 的地方。可以在客户端应用程序中使用 MEF（无论应用程序使用的是 Windows 窗体、WPF，还是任何其他技术），也可以在使用 ASP.NET 的服务器应用程序中使用 MEF。</p>
<p>&nbsp;</p>
<h2 style="font-size: 1.5em; font-family: 'Microsoft YaHei UI', 'Microsoft YaHei'; background-color: #dfdfdf; padding: 5px 10px; margin-bottom: 30px; margin-top: 20px; font-weight: bold; background-position: initial initial; background-repeat: initial initial;" data-index="2">MEF的关键概念</h2>
<p><strong>　　Import</strong></p>
<p>　　导入，这里建议作为一个名词来理解，即一个接受者，它可以接受外来的东东。就好比是下图中的盒子，它可以接受其它积木。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images0.cnblogs.com/i/30991/201405/011432414232243.jpg" alt="" /></p>
<p style="text-align: center;">十三孔智力盒</p>
<p>&nbsp;</p>
<p><strong>　　Export</strong></p>
<p>　　导出，同样建议以一个名词来理解，即一个第三方的产物。它就像上图中不同颜色的积木，这些积木不属于这个盒子，但是能被放入盒子中，来丰富盒子的功能。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images0.cnblogs.com/i/30991/201405/011432509393351.jpg" alt="" /></p>
<p style="text-align: center;">积木</p>
<p>&nbsp;</p>
<p><strong>　　Contract</strong></p>
<p>　　协议。要想使盒子能接受积木（<span>比如，圆柱体只能放入圆形的接口中），</span>那这些积木必须符合一定的形状。而这些形状就相当于是应用程序和第三方扩展之间的一个协议。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images0.cnblogs.com/i/30991/201405/011433028457687.jpg" alt="" /></p>
<p>&nbsp;</p>
<p><strong>　　Compose</strong></p>
<p>　　组合（动词），即将多个符合协议要求的部件组合在一起，构成一个功能丰富的应用程序。就好比是将不同形状的积木，按照接口的形状组合在一起。</p>
<p>&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<h2 style="font-size: 1.5em; font-family: 'Microsoft YaHei UI', 'Microsoft YaHei'; background-color: #dfdfdf; padding: 5px 10px; margin-bottom: 30px; margin-top: 20px; font-weight: bold; background-position: initial initial; background-repeat: initial initial;" data-index="3">它是如何工作的?</h2>
<p>　　MEF 会动态查找用户所指定的目录，如果发现该目录中的程序集满足协议要求，就会启动自身的组合引擎，然后根据不同的协议约定把这些扩展导入到应用程序内部。</p>
<p>&nbsp;</p>
<h2 style="font-size: 1.5em; font-family: 'Microsoft YaHei UI', 'Microsoft YaHei'; background-color: #dfdfdf; padding: 5px 10px; margin-bottom: 30px; margin-top: 20px; font-weight: bold; background-position: initial initial; background-repeat: initial initial;" data-index="4">用 MEF 实现一个最简单的可扩展应用程序</h2>
<p>　　对几个关键的概念清楚了之后，我们就可以开始实践了。最终的效果是窗体上会动态加载某一目录下的dll，并自动为每个新功能添加一个按钮，当点击按钮就会执行新的功能。</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images0.cnblogs.com/i/30991/201405/011433270485348.jpg" alt="" /></p>
<p style="text-align: center;">最终效果</p>
<p>&nbsp;</p>
<p><strong>　　首先，定义一个协议。</strong></p>
<p>　　这个和普通定义接口没什么两样。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> IPlugin
</span><span style="color: #008080;">2</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">3</span>         <span style="color: #0000ff;">string</span> Text { <span style="color: #0000ff;">get</span><span style="color: #000000;">; }
</span><span style="color: #008080;">4</span>  
<span style="color: #008080;">5</span>         <span style="color: #0000ff;">void</span><span style="color: #000000;"> Do();
</span><span style="color: #008080;">6</span>     }</pre>
</div>
<p>&nbsp;</p>
<p><strong style="line-height: 1.5;">　　安装接受者</strong>&nbsp;</p>
<p>　　有了协议之后，就需要给应用程序安一个接受者。让这个应用程序可以通过接受者来获取第三方扩展。<span>MEF 提供了<strong>[Import]&nbsp;</strong>和<strong>&nbsp;[ImportMany]</strong>&nbsp;两种 attribute。 区别就是 Import 只能接受符合协议的一个扩展，而 ImportMany 可以接受多个，并把多个扩展放入集合中。</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">partial</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Form1 : Form
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">public</span><span style="color: #000000;"> Form1()
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">            InitializeComponent();
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 7</span>  
<span style="color: #008080;"> 8</span> <span style="color: #000000;">        [ImportMany]
</span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">public</span> IEnumerable&lt;IPlugin&gt;<span style="color: #000000;"> plugins;
</span><span style="color: #008080;">10</span>  
<span style="color: #008080;">11</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> Form1_Load(<span style="color: #0000ff;">object</span><span style="color: #000000;"> sender, EventArgs e)
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">14</span>  
<span style="color: #008080;">15</span>     }</pre>
</div>
<p>&nbsp;</p>
<p><strong style="line-height: 1.5;"><br />　　提供一个符合协议的产物</strong>&nbsp;</p>
<p>　　这个产物的生产过程其实就是实现接口的过程，唯一的区别是我们要为这个实现打上个标签，从而告诉我们的组合引擎这个东西是给接受者的。MEF 提供了 Export 来暗示这是一个可以提供给接受者的产物。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>     [Export(<span style="color: #0000ff;">typeof</span><span style="color: #000000;">(IPlugin))]
</span><span style="color: #008080;"> 2</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MyPlugin:IPlugin
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Text
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">get</span>
<span style="color: #008080;"> 7</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 8</span>                 <span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">This is a demo</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">11</span>  
<span style="color: #008080;">12</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Do()
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">14</span> <span style="color: #000000;">            MessageBox.Show(Text);
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">16</span>     }</pre>
</div>
<p>&nbsp;</p>
<p><strong style="line-height: 1.5;"><br />　　发动引擎</strong>&nbsp;</p>
<p>　　万事俱备，就差发动了。前面说了引擎的主要作用就是把发现扩展，同时把这些扩展组合到应用程序中。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span><span style="color: #000000;"> CompositionContainer _container;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Init()
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">try</span>
<span style="color: #008080;"> 5</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 6</span>         MyPlugin my = <span style="color: #0000ff;">new</span><span style="color: #000000;"> MyPlugin();
</span><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">this</span>._container.ComposeParts(<span style="color: #0000ff;">this</span>, my);<span style="color: #008000;">//</span><span style="color: #008000;">把扩展和实例组合在一起</span>
<span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (CompositionException compositionException)
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        Console.WriteLine(compositionException.ToString());
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> }</pre>
</div>
<p>&nbsp;</p>
<p><span style="line-height: 1.5;">　　上面的代码虽然实现了组合的功能，但是却硬把产物给编码进去了。要是每次开发了新的扩展，都得这样修改应用程序代码，那就完全没有使用MEF的必要了，而且也违反了开放封闭的设计原则。</span>&nbsp;</p>
<p>　　把上面的代码改一改。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">private</span><span style="color: #000000;"> CompositionContainer _container;
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Init()
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;">设置目录，让引擎能自动去发现新的扩展</span>
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">var</span> catalog = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AggregateCatalog();
</span><span style="color: #008080;"> 6</span>     catalog.Catalogs.Add(<span style="color: #0000ff;">new</span> DirectoryCatalog(<span style="color: #800000;">"</span><span style="color: #800000;">D:\\plugin\\</span><span style="color: #800000;">"</span><span style="color: #000000;">));
</span><span style="color: #008080;"> 7</span>  
<span style="color: #008080;"> 8</span>     <span style="color: #008000;">//</span><span style="color: #008000;">创建一个容器，相当于是生产车间</span>
<span style="color: #008080;"> 9</span>     _container = <span style="color: #0000ff;">new</span><span style="color: #000000;"> CompositionContainer(catalog);
</span><span style="color: #008080;">10</span>  
<span style="color: #008080;">11</span>     <span style="color: #008000;">//</span><span style="color: #008000;">调用车间的ComposeParts把各个部件组合到一起</span>
<span style="color: #008080;">12</span>     <span style="color: #0000ff;">try</span>
<span style="color: #008080;">13</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">14</span>         <span style="color: #0000ff;">this</span>._container.ComposeParts(<span style="color: #0000ff;">this</span>);<span style="color: #008000;">//</span><span style="color: #008000;">这里只需要传入当前应用程序实例就可以了，其它部分会自动发现并组装</span>
<span style="color: #008080;">15</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">16</span>     <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (CompositionException compositionException)
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        Console.WriteLine(compositionException.ToString());
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">20</span> }</pre>
</div>
<p>&nbsp;</p>
<p>　　上面的代码会自动去发现扩展，然后加入到应用程序中来。你要做的只是把新扩展的程序集放入 D:\\plugin 目录中就可以了。<span>是不是很方便呢？</span></p>
<h2 style="font-size: 1.5em; font-family: 'Microsoft YaHei UI', 'Microsoft YaHei'; background-color: #dfdfdf; padding: 5px 10px; margin-bottom: 30px; margin-top: 20px; font-weight: bold; background-position: initial initial; background-repeat: initial initial;" data-index="5">参考资源</h2>
<p>　　<a title="Managed Extensibility Framework (MEF)" href="http://msdn.microsoft.com/zh-cn/library/dd460648(v=vs.110).aspx" target="_blank">Managed Extensibility Framework (MEF)</a></p>
<p>　　<a title="小试 MEF 扩展应用程序" href="http://pan.baidu.com/s/1gdA9Kgr" target="_blank">本文源代码下载</a></p>
<p>&nbsp;</p>
<p>本文来源于 <a title="如何用 MEF 扩展应用程序" href="http://blog.chenxu.me/post/detail?id=a7098e6b-3795-428a-858f-2121f64530cb" target="_blank">《如何用 MEF 扩展应用程序》</a></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
	<div class="postDesc">posted on 
<span id="post-date">2014-05-05 13:06</span>&nbsp;
<a href="https://www.cnblogs.com/stg609/">stg609</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=3702802" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(3702802);return false;">收藏</a></div>
</div>


<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 34546, cb_blogApp = 'stg609', cb_blogUserGuid = '7c30420b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 3702802, cb_entryCreatedDate = '2014-05-05 13:06', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


		</div>
	</div>
	<!-- left ends -->
	<!-- right starts -->
	<div id="right">
		<!-- 右侧工具部分 -->
		<div id="right_content">
	
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

	
			<div id="calendar"><div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                    <script>loadBlogDefaultCalendar();</script></div>
			
				<DIV id="leftcontentcontainer">
					<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
				</DIV>
			
		</div>
		<!-- //右侧工具部分 -->
		<div id="footer">
			<!--done-->
Copyright &copy; 2020 stg609
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



		</div>
	</div>
	<!-- right ends -->
	<div class="clear"></div>
	
</div>


    <div id="page_end_html">
        <div style="margin-left:135px"><script language="javascript" type="text/javascript" src="http://js.users.noscript.cnitblog.com/2035157.js"></script><noscript><a href="http://www.noscript.cnitblog.com/?2035157" target="_blank"><img alt="&#x6211;&#x8981;&#x5566;&#x514D;&#x8D39;&#x7EDF;&#x8BA1;"src="http://img.users.noscript.cnitblog.com/2035157.asp"style="border:none" /></a></noscript></div>

<a class="bshareDiv" href="http://www.bshare.cn/share">分享按钮</a><script type="text/javascript" charset="utf-8" src="http://static.bshare.cn/b/buttonLite.js#uuid=84c99111-10cc-4c8d-bf0f-a9e8030d5c37&amp;style=3&amp;fs=4&amp;textcolor=#fff&amp;bgcolor=#06C&amp;text=分享到"></script>
    </div>
</body>
</html>